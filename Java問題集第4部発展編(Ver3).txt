
Java問題集第4部・発展編


【課題401】suretu.java				数列処理(フィボナッチ数列、トリボナッチ数列、テトラナッチ数列)
【課題402】RandomCube.java			乱数(３次元配列)
【課題403】Toi6_8_1x.java			成績表の作成
【課題404】nenreiy.java				年齢構成表と縦棒グラフ
【課題405】jankenx.java				じゃんけん
【課題406】angouka.java				暗号化
【課題407】fukugouka.java			復号化
【課題408】MojiretuAssyuku.java			文字列圧縮
【課題409】MojiretuKaito.java			文字列解凍
【課題410】bmi.java				BMI（Body Mass Index）を計測

【課題411】Array_Name.java			名前作成
【課題412】Array_Name2.java			名前一致
【課題413】Array4.java				3次元配列のデータを作表する。
【課題414】ArrayShikaku.java			多重の四角を表示する。	

********************************************************************************
数列処理(フィボナッチ数列、トリボナッチ数列、テトラナッチ数列)
********************************************************************************
【課題401】suretu.java
メニューを表示し、各数列を作成する。以下の3つの数列を20個作成する。
フィボナッチ数列はどの項も、その前の２つの項の和となっている。
トリボナッチ数列はどの項も、その前の３つの項の和となっている。
テトラナッチ数列はどの項も、その前の４つの項の和となっている。
最初の２項はどの数列も1,1である

ヒント→各数列の＊つの項の和の＊とメニュー番号を対応させるとロジックが一つで済む。

		final int n = 20;　　
		int[] array = new int[n];	/*配列の確保*/
		String[] suretumei = {"","","フィボナッチ数列","トリボナッチ数列","テトラナッチ数列"}; 
		
<処理結果例>
msg: 数列の種類を選択してください。
menu: 終了:1  フィボナッチ数列:2  トリボナッチ数列:3  テトラナッチ数列:4
選択> 2
フィボナッチ数列を求めます。項数は20個
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765
msg: 数列の種類を選択してください。
menu: 終了:1  フィボナッチ数列:2  トリボナッチ数列:3  テトラナッチ数列:4
選択> 3
トリボナッチ数列を求めます。項数は20個
1 1 2 4 7 13 24 44 81 149 274 504 927 1705 3136 5768 10609 19513 35890 66012
msg: 数列の種類を選択してください。
menu: 終了:1  フィボナッチ数列:2  トリボナッチ数列:3  テトラナッチ数列:4
選択> 4
テトラナッチ数列を求めます。項数は20個
1 1 2 4 8 15 29 56 108 208 401 773 1490 2872 5536 10671 20569 39648 76424 147312

msg: 数列の種類を選択してください。
menu: 終了:1  フィボナッチ数列:2  トリボナッチ数列:3  テトラナッチ数列:4
選択> 1
終了します。



******************************************
乱数(３次元配列)
******************************************
【課題402】RandomCube.java
乱数を発生させて、3*3*3の３次元配列に１番から27番までの値を格納する。ただし、同じ値は格納しないものとする。
その後、順に表示しなさい。乱数により指定した添え字に値が既にある場合は、失敗とする。
【ヒント】→Random.javaを参照

		final int N = 3;
		int[][][] array = new int[N][N][N];
		略
		int i = (int)(Math.random() * N);
		int j = (int)(Math.random() * N);
		int k = (int)(Math.random() * N);

<実行結果>
（実行例）
[1][1][1] = 6   [1][1][2] = 15  [1][1][3] = 18
[1][2][1] = 13  [1][2][2] = 27  [1][2][3] = 9
[1][3][1] = 8   [1][3][2] = 21  [1][3][3] = 20

[2][1][1] = 12  [2][1][2] = 24  [2][1][3] = 22
[2][2][1] = 11  [2][2][2] = 2   [2][2][3] = 10
[2][3][1] = 19  [2][3][2] = 25  [2][3][3] = 5

[3][1][1] = 16  [3][1][2] = 23  [3][1][3] = 4
[3][2][1] = 7   [3][2][2] = 3   [3][2][3] = 14
[3][3][1] = 17  [3][3][2] = 1   [3][3][3] = 26

失敗=26回



******************************************
成績表の作成
******************************************
【課題403】Toi6_8_1x.java
学生1から3までのそれぞれの科目の得点を入力させ、以下のような表を作成する。
一つ入力する毎に関連する合計値を計算させるようにしなさい。
【ヒント】→Toit6_8_1.javaを参照しなさい。

<実行結果例>
学生1の点数を入力して下さい。
国語: 95
数学: 70
社会: 85
英語: 85
学生2の点数を入力して下さい。
国語: 90
数学: 70
社会: 80
英語: 90
学生3の点数を入力して下さい。
国語: 90
数学: 65
社会: 80
英語: 80
                国語    数学    社会    英語    合計
学生1の点数     95      70      85      85      335
学生2の点数     90      70      80      90      330
学生3の点数     90      65      80      80      315

                国語    数学    社会    英語    総計
合計点          275     205     245     255     980
平均点          91      68      81      85      81




******************************************
年齢構成表と縦棒グラフ
******************************************
【課題404】nenreiy.java
nenreix.javaで出力している横棒グラフを縦棒グラフに変えて出力しなさい。
ヒント→配列nenreiの要素の最大値分だけ(以下の例だと6回)全体の処理を繰り返す。
		そして、"**"を出力すべきか、空白を出力すべきかを判断していく。

<実行結果例>
乱数で生成したデータ : 19,4,45,60,65,9,46,5,69,61,13,11,62,12,50,65,7,38,41,15,
nenrei[0] = 4
nenrei[1] = 5
nenrei[2] = 0
nenrei[3] = 1
nenrei[4] = 3
nenrei[5] = 1
nenrei[6] = 6

縦棒グラフの作成
                        **
    **                  **
**  **                  **
**  **          **      **
**  **          **      **
**  **      **  **  **  **
---------------------------------
 0  10  20  30  40  50  60
代  代  代  代  代  代  代




******************************************
じゃんけん
******************************************
【課題405】jankenx.java
コンピュータとじゃんけんをするプログラムを作成する。
終了する時に勝敗数とどちらの勝ちかを表示する。
コンピュータが終了したいと通知してきたら終了か続行かを指定する。

<実行結果例>
msg: じゃんけんしよう。コンピュータが相手します。
msg: 出すものを決めてください。menu: (グー:0　チョキ:1　パー:2　終了:3)　> 0
じゃんけんぽん　あいこです。

msg: じゃんけんしよう。コンピュータが相手します。
msg: 出すものを決めてください。menu: (グー:0　チョキ:1　パー:2　終了:3) > 1
じゃんけんぽん　コンピュータの勝ちです。

msg: じゃんけんしよう。コンピュータが相手します。
msg: 出すものを決めてください。menu: (グー:0　チョキ:1　パー:2　終了:3) > 2
じゃんけんぽん　あいこです。

msg: じゃんけんしよう。コンピュータが相手します。
msg: 出すものを決めてください。menu: (グー:0　チョキ:1　パー:2　終了:3) > 0

コンピュータから終了したいと通知がありました。
どうしたしますか？　(終了:3　続行:3以外) > 4
じゃんけんぽん　コンピュータの勝ちです。

msg: じゃんけんしよう。コンピュータが相手します。
msg: 出すものを決めてください。menu: (グー:0　チョキ:1　パー:2　終了:3) > 1

コンピュータから終了したいと通知がありました。
どうしたしますか？　(終了:3　続行:3以外) > 3
0勝2敗2引き分けで
コンピュータの勝ちです。
終了します。




********************************************************************************
暗号化
********************************************************************************
【課題406】angouka.java
暗号化対象文字列を"dragon*ball Z!! 015698"とし、key値を入力することによって暗号化する。
アルファベットはkey値分ずらし、小文字は大文字にする。記号はそのままとする。
数値はkey値分ずらすこととする。
【ヒント】→compareToIgnoreCase()、substring()を利用する。
		String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String decimal = "0123456789";

		
<実行結果例>
この結果は入力を省力化するため"dragon*ball Z!! 015698"に固定しています。
本来は、暗号化する文字列を入力します。

（処理例１）
key値を入力して下さい。(整数:正負可) > 0
暗号化前=dragon*ball Z!! 015698
暗号化文=DRAGON*BALL Z!! 015698

（処理例２）
key値を入力して下さい。(整数:正負可) > -1
暗号化前=dragon*ball Z!! 015698
暗号化文=CQZFNM*AZKK Y!! 904587

（処理例３）
key値を入力して下さい。(整数:正負可) > -9
暗号化前=dragon*ball Z!! 015698
暗号化文=UIRXFE*SRCC Q!! 126709

（処理例４）
key値を入力して下さい。(整数:正負可) > -10
暗号化前=dragon*ball Z!! 015698
暗号化文=THQWED*RQBB P!! 015698

（処理例５）
key値を入力して下さい。(整数:正負可) > -11
暗号化前=dragon*ball Z!! 015698
暗号化文=SGPVDC*QPAA O!! 904587

（処理例６）
key値を入力して下さい。(整数:正負可) > -30
暗号化前=dragon*ball Z!! 015698
暗号化文=ZNWCKJ*XWHH V!! 015698

（処理例７）
key値を入力して下さい。(整数:正負可) > 1
暗号化前=dragon*ball Z!! 015698
暗号化文=ESBHPO*CBMM A!! 126709

（処理例８）
key値を入力して下さい。(整数:正負可) > 25
暗号化前=dragon*ball Z!! 015698
暗号化文=CQZFNM*AZKK Y!! 560143

（処理例９）
key値を入力して下さい。(整数:正負可) > 26
暗号化前=dragon*ball Z!! 015698
暗号化文=DRAGON*BALL Z!! 671254

（処理例１０）
key値を入力して下さい。(整数:正負可) > 27
暗号化前=dragon*ball Z!! 015698
暗号化文=ESBHPO*CBMM A!! 782365

（処理例１１）
key値を入力して下さい。(整数:正負可) > 51
暗号化前=dragon*ball Z!! 015698
暗号化文=CQZFNM*AZKK Y!! 126709

（処理例１２）
key値を入力して下さい。(整数:正負可) > 52
暗号化前=dragon*ball Z!! 015698
暗号化文=DRAGON*BALL Z!! 237810

（処理例１３）
key値を入力して下さい。(整数:正負可) > 53
暗号化前=dragon*ball Z!! 015698
暗号化文=ESBHPO*CBMM A!! 348921


********************************************************************************
復号化
********************************************************************************
【課題407】fukugouka.java
暗号化された文字列を復号化するプログラムを作成する。
暗号化の際に入力したkey値*(-1)の値を入力することで"DRAGON*BALL Z!! 015698"という文字列を復号化する。
【ヒント】→暗号化のプログラムがそのまま使用できることに気がつくだろうか。

<実行結果例>
（処理例１）
復号化する文字列を入力して下さい。> dragon*ball Z!! 015698
key値を入力して下さい。(整数:正負可) > 0
復号化前=dragon*ball Z!! 015698
復号化後=DRAGON*BALL Z!! 015698

（処理例２）
復号化する文字列を入力して下さい。> CQZFNM*AZKK Y!! 904587
key値を入力して下さい。(整数:正負可) > 1
復号化前=CQZFNM*AZKK Y!! 904587
復号化後=DRAGON*BALL Z!! 015698

（処理例３）
復号化する文字列を入力して下さい。> UIRXFE*SRCC Q!! 126709
key値を入力して下さい。(整数:正負可) > 9
復号化前=UIRXFE*SRCC Q!! 126709
復号化後=DRAGON*BALL Z!! 015698

（処理例４）
復号化する文字列を入力して下さい。> THQWED*RQBB P!! 015698
key値を入力して下さい。(整数:正負可) > 10
復号化前=THQWED*RQBB P!! 015698
復号化後=DRAGON*BALL Z!! 015698

（処理例５）
復号化する文字列を入力して下さい。> SGPVDC*QPAA O!! 904587
key値を入力して下さい。(整数:正負可) > 11
復号化前=SGPVDC*QPAA O!! 904587
復号化後=DRAGON*BALL Z!! 015698

（処理例６）
復号化する文字列を入力して下さい。> ZNWCKJ*XWHH V!! 015698
key値を入力して下さい。(整数:正負可) > 30
復号化前=ZNWCKJ*XWHH V!! 015698
復号化後=DRAGON*BALL Z!! 015698

（処理例７）
復号化する文字列を入力して下さい。> ESBHPO*CBMM A!! 126709
key値を入力して下さい。(整数:正負可) > -1
復号化前=ESBHPO*CBMM A!! 126709
復号化後=DRAGON*BALL Z!! 015698

（処理例８）
復号化する文字列を入力して下さい。> CQZFNM*AZKK Y!! 560143
key値を入力して下さい。(整数:正負可) > -25
復号化前=CQZFNM*AZKK Y!! 560143
復号化後=DRAGON*BALL Z!! 015698

（処理例９）
復号化する文字列を入力して下さい。> DRAGON*BALL Z!! 671254
key値を入力して下さい。(整数:正負可) > -26
復号化前=DRAGON*BALL Z!! 671254
復号化後=DRAGON*BALL Z!! 015698

（処理例１０）
復号化する文字列を入力して下さい。> ESBHPO*CBMM A!! 782365
key値を入力して下さい。(整数:正負可) > -27
復号化前=ESBHPO*CBMM A!! 782365
復号化後=DRAGON*BALL Z!! 015698

（処理例１１）
復号化する文字列を入力して下さい。> CQZFNM*AZKK Y!! 126709
key値を入力して下さい。(整数:正負可) > -51
復号化前=CQZFNM*AZKK Y!! 126709
復号化後=DRAGON*BALL Z!! 015698

（処理例１２）
復号化する文字列を入力して下さい。> DRAGON*BALL Z!! 237810
key値を入力して下さい。(整数:正負可) > -52
復号化前=DRAGON*BALL Z!! 237810
復号化後=DRAGON*BALL Z!! 015698

（処理例１３）
復号化する文字列を入力して下さい。> ESBHPO*CBMM A!! 348921
key値を入力して下さい。(整数:正負可) > -53
復号化前=ESBHPO*CBMM A!! 348921
復号化後=DRAGON*BALL Z!! 015698


******************************************
文字列圧縮
******************************************
【課題408】MojiretuAssyuku.java
以下の結果を表示するプログラムを作成しなさい。
【ヒント】→
		String strS = "";		//入力側文字列
		String strP = "";		//圧縮後文字列

		final char EOS = ';';
		final char COMPRESS = '@';


		try{
			strS = br.readLine();
			if( strS.charAt(strS.length() - 1) != EOS ){
				System.out.println("終端文字\";\"の入力忘れです。");
				
				

		}catch( Exception e){
			System.out.println("入出力エラー発生。処理を終了します。");
			System.exit(1);
		}


<実行結果例>
（処理例１）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS -->
値が指定されていません。再入力してください


（処理例２）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS --> ;
終端文字";"しか入力されていません。値を再入力してください


（処理例３）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS --> a;
入力文字列　strS = a;
-----------------------------------------
圧縮処理開始！　処理履歴を表示します
strPにaを文字転送します。
strP = a
圧縮処理終了！
-----------------------------------------
圧縮後文字列　strP = a;


（処理例３）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS --> abcd;
入力文字列　strS = abcd;
-----------------------------------------
圧縮処理開始！　処理履歴を表示します
strPにaを文字転送します。
strP = a
strPにbを文字転送します。
strP = ab
strPにcを文字転送します。
strP = abc
strPにdを文字転送します。
strP = abcd
圧縮処理終了！
-----------------------------------------
圧縮後文字列　strP = abcd;


（処理例４）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS --> abcaaabbbbbb;
入力文字列　strS = abcaaabbbbbb;
-----------------------------------------
圧縮処理開始！　処理履歴を表示します
strPにaを文字転送します。
strP = a
strPにbを文字転送します。
strP = ab
strPにcを文字転送します。
strP = abc
aの圧縮処理を行います。
strP = abc@3a
bの圧縮処理を行います。
strP = abc@3a@6b
圧縮処理終了！
-----------------------------------------
圧縮後文字列　strP = abc@3a@6b;


（処理例５）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS --> aaaaaaaaaaaaabcd;
入力文字列　strS = aaaaaaaaaaaaabcd;
-----------------------------------------
圧縮処理開始！　処理履歴を表示します
aの圧縮処理を行います。
strP = @13a
strPにbを文字転送します。
strP = @13ab
strPにcを文字転送します。
strP = @13abc
strPにdを文字転送します。
strP = @13abcd
圧縮処理終了！
-----------------------------------------
圧縮後文字列　strP = @13abcd;


（処理例６）
アルファベットで文字列strSを入力してください。
終端文字は";"を必ず入力します。
input strS --> aaa   bbb   ccc;
入力文字列　strS = aaa   bbb   ccc;
-----------------------------------------
圧縮処理開始！　処理履歴を表示します
aの圧縮処理を行います。
strP = @3a
 の圧縮処理を行います。
strP = @3a@3
bの圧縮処理を行います。
strP = @3a@3 @3b
 の圧縮処理を行います。
strP = @3a@3 @3b@3
cの圧縮処理を行います。
strP = @3a@3 @3b@3 @3c
圧縮処理終了！
-----------------------------------------
圧縮後文字列　strP = @3a@3 @3b@3 @3c;



******************************************
文字列解凍
******************************************
【課題409】MojiretuKaito.java
以下の結果を表示するプログラムを作成しなさい。
【ヒント】→
		String strS = "";		//入力側文字列
		String strP = "";		//圧縮後文字列

		final char EOS = ';';
		final char COMPRESS = '@';

<実行結果例>
（処理例１）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP -->
入出力エラー発生。処理を終了します。


（処理例２）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP --> ;
終端文字";"しか入力されていません。値を再入力してください


（処理例３）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP --> abc;
入力文字列　strP = abc;
-----------------------------------------
解凍処理開始！　処理履歴を表示します
strSにaを文字転送します。
strS = a
strSにbを文字転送します。
strS = ab
strSにcを文字転送します。
strS = abc
解凍処理終了！
-----------------------------------------
解凍後文字列　strS = abc;


（処理例４）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP --> @5a;
入力文字列　strP = @5a;
-----------------------------------------
解凍処理開始！　処理履歴を表示します
aを5個分、解凍します。
strS = aaaaa
解凍処理終了！
-----------------------------------------
解凍後文字列　strS = aaaaa;


（処理例５）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP --> abc@5xxyz@6z;
入力文字列　strP = abc@5xxyz@6z;
-----------------------------------------
解凍処理開始！　処理履歴を表示します
strSにaを文字転送します。
strS = a
strSにbを文字転送します。
strS = ab
strSにcを文字転送します。
strS = abc
xを5個分、解凍します。
strS = abcxxxxx
strSにxを文字転送します。
strS = abcxxxxxx
strSにyを文字転送します。
strS = abcxxxxxxy
strSにzを文字転送します。
strS = abcxxxxxxyz
zを6個分、解凍します。
strS = abcxxxxxxyzzzzzzz
解凍処理終了！
-----------------------------------------
解凍後文字列　strS = abcxxxxxxyzzzzzzz;


（処理例６）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP --> @12az@5aa;
入力文字列　strP = @12az@5aa;
-----------------------------------------
解凍処理開始！　処理履歴を表示します
aを12個分、解凍します。
strS = aaaaaaaaaaaa
strSにzを文字転送します。
strS = aaaaaaaaaaaaz
aを5個分、解凍します。
strS = aaaaaaaaaaaazaaaaa
strSにaを文字転送します。
strS = aaaaaaaaaaaazaaaaaa
解凍処理終了！
-----------------------------------------
解凍後文字列　strS = aaaaaaaaaaaazaaaaaa;



（処理例７）
圧縮後の文字列strPを入力してください。
終端文字は";"を必ず入力します。
input strP --> @20 c;
入力文字列　strP = @20 c;
-----------------------------------------
解凍処理開始！　処理履歴を表示します
 を20個分、解凍します。
strS =
strSにcを文字転送します。
strS =                     c
解凍処理終了！
-----------------------------------------
解凍後文字列　strS =                     c;




********************************************************
BMIの計測、適正・美容・モデル体重との比較
********************************************************
【課題410】bmi.java
名前、身長、体重を入力して、BMI値、肥満度、適正体重、美容体重、モデル体重を求め、
自分の体重との差を表示する。

BMI= (体重Kg) 	÷　(身長m)の2乗 
適正体重 = (身長m)の2乗 × 22
美容体重 = (身長m)の2乗 × 20
モデル体重 =  (身長m)の2乗 × 18

小数点以下を2桁にまとまるには、次の書式を利用する。
System.out.printf("%3.2f\n", bmi);

(実行例１　太りすぎの例)
msg:あなたのBMIを算出します。
あなたの名前を入力してください。>船橋太郎
身長を入力してください。（例：170.5）単位：cm >170
体重を入力してください。（例：80.5）単位：Kg >90

msg:BMIの範囲           肥満度の表
        --------------  -----------
        18.5未満        低体重
        18.5〜25.0未満  普通体重
        25.0〜30.0未満  肥満(1度)
        30.0〜35.0未満  肥満(2度)
        35.0〜40.0未満  肥満(3度)
        40.0以上        肥満(4度)

MSG:船橋太郎さんのBMI測定結果

身長=170.0cm
体重=90.0kg
BMI=31.14
肥満度=肥満(2度)

適正体重=63.58Kg
適正体重より26.42kg多い
美容体重=57.80kg
美容体重より32.20kg多い
モデル体重=52.02kg
モデル体重より37.98kg多い


(実行例２　やせすぎの例)
msg:あなたのBMIを算出します。
あなたの名前を入力してください。>船橋次郎
身長を入力してください。（例：170.5）単位：cm >170
体重を入力してください。（例：80.5）単位：Kg >50

msg:BMIの範囲           肥満度の表
        --------------  -----------
        18.5未満        低体重
        18.5〜25.0未満  普通体重
        25.0〜30.0未満  肥満(1度)
        30.0〜35.0未満  肥満(2度)
        35.0〜40.0未満  肥満(3度)
        40.0以上        肥満(4度)

MSG:船橋次郎さんのBMI測定結果

身長=170.0cm
体重=50.0kg
BMI=17.30
肥満度=低体重

適正体重=63.58Kg
適正体重より13.58kg少ない
美容体重=57.80kg
美容体重より7.80kg少ない
モデル体重=52.02kg
モデル体重より2.02kg少ない


********************************************************
名前作成
********************************************************
【課題411】Array_Name.java

4文字の漢字で名前を順に作成する。

【ヒント】
		String[] sei1 = {"青","赤","黒","白"};
		String[] sei2 = {"山","木","井","田"};
		String[] mei1 = {"良","将","祐","俊"};
		String[] mei2 = {"輝","郎","一","太"};
		
		String name = "";
		int cnt = 1;
		
		System.out.println("msg: 名前を順に表示します");
		for(int i = 0; i < sei1.length; i++){
			for(int j = 0; j < sei2.length; j++){
				（中略）
				name = sei1[i] + sei2[j] + mei1[k] + mei2[w];
		


<実行結果例>
msg: 名前を順に表示します
1:      青山良輝
2:      青山良郎
3:      青山良一
4:      青山良太
5:      青山将輝
6:      青山将郎
7:      青山将一

（中略）

65:     赤山良輝
66:     赤山良郎
67:     赤山良一
68:     赤山良太
69:     赤山将輝
70:     赤山将郎
71:     赤山将一
72:     赤山将太
73:     赤山祐輝
74:     赤山祐郎
75:     赤山祐一
76:     赤山祐太

（中略）

247:    白田将一
248:    白田将太
249:    白田祐輝
250:    白田祐郎
251:    白田祐一
252:    白田祐太
253:    白田俊輝
254:    白田俊郎
255:    白田俊一
256:    白田俊太



********************************************************
名前一致
********************************************************
【課題412】Array_Name2.java

自分の名前を入力して、プログラムが作成する名前と一致する番号を表示する。
ただし、一致しない場合は、見つからないと表示する。

5文字漢字の学生（例：船橋良太郎）は、配列の数を変えても良い。

【ヒント】

		String[] sei1 = {"青","安","黒","白"};
		String[] sei2 = {"山","木","倍","田"};
		String[] mei1 = {"晋","将","祐","俊"};
		String[] mei2 = {"輝","郎","三","太"};
		
		String namae;
		String name = "";
		
		boolean itti = false;
				
		System.out.print("あなたの名前を入力してください。＞");
		namae = br.readLine();
				
		int cnt = 1;
		
		for(int i = 0; i < sei1.length; i++){
　			for(int j = 0; j < sei2.length; j++){
				中略

<実行結果例>

（実行例１）
あなたの名前を入力してください。＞青山祐太
MSG:同じ名前を12番に発見しました。

（実行例２）
あなたの名前を入力してください。＞安倍晋三
MSG:同じ名前を99番に発見しました。

（実行例３）
あなたの名前を入力してください。＞青木祐太郎
MSG: 入力された名前は見つかりませんでした。


********************************************************
3次元配列のデータを作表する。
********************************************************
【課題413】Array4.java

3次元配列に乱数を利用して値を入力する。
入力された値を作表する。

【ヒント】
		int shiten_sum = 0;		//支店合計
		int ki_sum = 0;			//期の合計
		int nen_sum = 0;		//年度合計
		
						
		String[] nen = {"2030年度","2031年度"}; 
		int[] nen_kei = new int[nen.length];					//年度の合計を格納する配列

		String[] shiten = {"A支店","B支店","c支店"};
		int[] shiten_kei = new int[shiten.length];				//支店の合計を格納する配列

		String[] ki = {"第1期","第2期","第3期","第4期"};
		int[] ki_kei = new int[ki.length];						//期の合計を格納する配列

		
		int [][][] array = new int[nen.length][shiten.length][ki.length];	//データを格納する
	
		System.out.println("msg: 三次元配列array(2*3*4)に0から99までのデータを割り当てます");		
		for(int k = 0; k < nen.length; k++){
			for(int i = 0; i < shiten.length; i++){
				for(int j = 0; j < ki.length; j++){

					array[k][i][j] = (int)(Math.random() * 100);	//3次元配列に乱数を利用してデータ格納する。

					System.out.print("array[" + k + "][" + i + "][" + j + "]=" +
									nen[k] + "\t" +shiten[i] + "\t" + ki[j] + "\t" + array[k][i][j] + "\n");

					nen_kei[k] += array[k][i][j]; 				//年度の配列に乱数で作成したデータを格納する。
					略							//支店の配列に乱数で作成したデータを格納する。
					略							//期間の配列に乱数で作成したデータを格納する。
				}
			}
		}
		

		System.out.println("MSG: 年度の計を表示します。");		//年度の配列を計算する。
		for( int k = 0; k < nen_kei.length; k++){
			System.out.println(nen[k] + "計:"+ nen_kei[k]);
			nen_sum += nen_kei[k];
		}
		System.out.println("年度計:" + nen_sum);
		中略	


（実行例）
msg: 三次元配列array(2*3*4)に0から99までのデータを割り当てます
array[0][0][0]=2030年度 A支店   第1期   65
array[0][0][1]=2030年度 A支店   第2期   62
array[0][0][2]=2030年度 A支店   第3期   60
array[0][0][3]=2030年度 A支店   第4期   88
array[0][1][0]=2030年度 B支店   第1期   20
array[0][1][1]=2030年度 B支店   第2期   31
array[0][1][2]=2030年度 B支店   第3期   47
array[0][1][3]=2030年度 B支店   第4期   92
array[0][2][0]=2030年度 c支店   第1期   15
array[0][2][1]=2030年度 c支店   第2期   6
array[0][2][2]=2030年度 c支店   第3期   41
array[0][2][3]=2030年度 c支店   第4期   47
array[1][0][0]=2031年度 A支店   第1期   33
array[1][0][1]=2031年度 A支店   第2期   21
array[1][0][2]=2031年度 A支店   第3期   18
array[1][0][3]=2031年度 A支店   第4期   50
array[1][1][0]=2031年度 B支店   第1期   5
array[1][1][1]=2031年度 B支店   第2期   40
array[1][1][2]=2031年度 B支店   第3期   28
array[1][1][3]=2031年度 B支店   第4期   38
array[1][2][0]=2031年度 c支店   第1期   73
array[1][2][1]=2031年度 c支店   第2期   75
array[1][2][2]=2031年度 c支店   第3期   75
array[1][2][3]=2031年度 c支店   第4期   96

MSG: 年度の計を表示します。
2030年度計:574
2031年度計:552
年度計:1126
MSG: 支店の計を表示します。
A支店計:397
B支店計:301
c支店計:428
支店計:1126
MSG: 期の計を表示します。
第1期計:211
第2期計:235
第3期計:269
第4期計:411
期計:1126

MSG: 支店・期間別帳表を作成します。
**** 支店・期間別帳表 ****
【2030年度】
        第1期   第2期   第3期   第4期
A支店   65      62      60      88
B支店   20      31      47      92
c支店   15      6       41      47

【2031年度】
        第1期   第2期   第3期   第4期
A支店   33      21      18      50
B支店   5       40      28      38
c支店   73      75      75      96


********************************************************************************
多重の四角を表示する。
********************************************************************************
【課題414】arrayShikaku.java

指定した数の四角を表示する。
乱数を使って猫と犬の出現割合は99：1とする。

【ヒント】
		System.out.print("四角の個数を指定してください。(1-10) > ");
		int shikaku = Integer.parseInt(br.readLine());
		
		//領域の確保
		int n = (shikaku * 4) - 1;
		String[][] array = new String[n][n];	/*領域の配列を確保*/

		int cat_su = 0;				//猫の数
		int dog_su = 0;				//犬の数
		
		/*array[][]を空白で初期化する*/
		for( int i = 0; i < n; i++){
			for( int j = 0; j < n; j++){
				array[i][j] = "　";
			}
		}
		
		//asa先生を中心に配置
		array[(n/2)][(n/2)] = "朝";
		
		//猫を四角で囲う
		for( int k = 0; k < shikaku; k++){
			for( int i = k*2; i < n - k*2; i++){
				略

（実行例１)
四角の個数を指定してください。(1-10) > 3
猫猫猫猫猫猫猫猫猫猫猫
猫　　　　　　　　　猫
猫　猫猫猫猫猫猫猫　猫
猫　猫　　　　　猫　猫
猫　猫　猫猫猫　猫　猫
猫　猫　猫朝猫　猫　猫
猫　猫　猫猫猫　猫　猫
猫　猫　　　　　猫　猫
猫　猫猫猫猫猫猫猫　猫
猫　　　　　　　　　猫
猫猫猫猫猫猫猫猫猫猫犬

朝先生の飼っている猫の数は現在、71匹です。
朝先生の飼っている犬の数は現在、1匹です。

（実行例２）
四角の個数を指定してください。(1-10) > 5
猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫
猫　　　　　　　　　　　　　　　　　猫
猫　猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫　猫
猫　猫　　　　　　　　　　　　　猫　猫
猫　猫　猫猫猫猫猫猫猫猫猫猫猫　猫　猫
猫　猫　猫　　　　　　　　　猫　猫　猫
猫　猫　猫　猫猫猫猫猫猫猫　猫　猫　猫
猫　猫　猫　猫　　　　　猫　猫　猫　猫
猫　猫　猫　猫　猫猫猫　猫　猫　猫　猫
猫　猫　猫　猫　猫朝猫　猫　猫　猫　猫
猫　猫　猫　猫　猫猫猫　猫　猫　猫　猫
猫　猫　猫　猫　　　　　猫　猫　猫　猫
猫　猫　猫　猫猫猫猫猫猫猫　猫　猫　猫
猫　猫　猫　　　　　　　　　猫　猫　猫
猫　猫　猫猫猫猫猫猫猫猫猫猫猫　猫　猫
猫　猫　　　　　　　　　　　　　猫　猫
猫　猫猫猫猫猫猫猫猫猫猫猫犬猫猫猫　猫
猫　　　　　　　　　　　　　　　　　猫
猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫猫

朝先生の飼っている猫の数は現在、199匹です。
朝先生の飼っている犬の数は現在、1匹です。


