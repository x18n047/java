
Java問題集第2部・応用編


【課題201】Uranaix.java				判断文(if else)		乱数発生 (Math.random())
【課題202】Timer.java				while文のネストを利用した時間換算
【課題203】KukudoWhile.java			dowhileのネストを利用した九九表
【課題204】Kukuz1.java				処理フローの制御 (break文)
【課題205】Kukuz2.java				処理フローの制御(continue文)
【課題206】NestLoopy.java			for文のネストを利用した三角形の描写
【課題207】IntPyramid.java			for文のネストを利用して整数ピラミッド作成
【課題208】intGyakuPyramid			for文のネストを利用して逆ピラミッド作成
【課題209】intyokoGyakuPyramid			for文のネストを利用して逆ピラミッドを横に配置
【課題210】inttateyokoGyakuPyramid		for文のネストを利用して逆ピラミッドを縦横に配置
【課題211】Rei6_8_2y.java			列数が異なる２次元配列へ要素を格納
【課題212】Array3.java				三次元配列の利用
【課題213】Rei8_3_1x.java			int型の引数とint型の戻り値
【課題214】Rei8_boolean.java			int型変数とboolean型の戻り値
【課題215】Rei8_1_3z.java			length()メソッド、 substring()メソッド、
【課題216】Rei8_1_3zz.java			indexOf()メソッド

【課題217】trump1.java				トランプのシャッフルを行う。
【課題218】array2z.java				2次元配列を渦巻き上に移動する。
【課題219】NestLoop2.java			龍の尻尾を作成する。

***********************************************
判断文(if else)		乱数発生 (Math.random())
***********************************************
【課題201】Uranaix.java
テキストP213のEnshu7_1.javaを参考にしてUranaix.java作成しなさい。
0～99までの乱数を発生させ、if文で範囲を確定し、本日の運勢を占う。
ただし、各メッセージの表示確率は以下のように異なるものとする。
確率20% 何をやっても絶好調です。
確率10% 待ちわびた人に出会えます。
確率50% ７がラッキーNoです。
確率20% 風邪を引きやすいので注意しましょう。

【ヒント】→テキストP217のEnshu7_1.javaを参照
		以下のソースプログラムを参照
		hitnumber = (int)(Math.random() * 100);	/*0から99までの整数を発生させる。*/
		その確率の範囲をどのように表現するかを考える。

【解説】→乱数により0から99までの100個のうちいずれかの値が発生する。
		その値がどの範囲に入るかで確率を決めていけばよい。

		例えば以下のように定義する。。
		00-19の範囲　20%	何をやっても絶好調です。
		20-29の範囲　10%	待ちわびた人に出会えます。
		30-79の範囲　50%	７がラッキーNoです。
		80-99の範囲　20%	風邪を引きやすいので注意しましょう。	

<実行結果>
（実行例１）
msg:本日の占いを行います。
あなたのお名前は > 船橋太郎
本日の船橋太郎さんは風邪を引きやすいので注意しましょう。
hitnumber = 88

（実行例２）
msg:本日の占いを行います。
あなたのお名前は > 船橋太郎
本日の船橋太郎さんは何をやっても絶好調です。
hitnumber = 10

（実行例３）
msg:本日の占いを行います。
あなたのお名前は > 船橋太郎
本日の船橋太郎さんは７がラッキーNoです。
hitnumber = 40

（実行例４）
msg:本日の占いを行います。
あなたのお名前は > 船橋太郎
本日の船橋太郎さんは待ちわびた人に出会えます。
hitnumber = 20


******************************************
while文のネストを利用した時間換算
******************************************
【課題202】Timer.java
while文のネストを使用して変数ssで与えられた秒数をhh時間、mm分、ss秒に変換するプログラムを作成しなさい。
ssに0が入力された時点で処理を終了する。

【ヒント】→テキストP87二度読み法のアルゴリズムを参照
【ヒント】→以下のプログラムソースを参照

		int hh;		//時間
		int mm;		//分
		int ss;		//秒
		int ss_s;	//入力した秒を一旦格納

		ssを入力;
		//入力されたSSは時間、分に変換され、次第に値が減少する。
		//最後の結果表示をするために入力時点でssをss_sに格納しておく必要がある。

		while(　ss != 0 ){	//hh、mmを初期化するするタイミングはどこか？
		
			//ss秒をhh時間に変換する処理
			while(ss >= 3600){
				ss -= 3600;
				hh++;
			}

			//これ以上1時間が取れないss秒を分に変換する処理
			中略

			2度目以降のss入力を行う。
		}

<実行結果例>
msg:入力する秒数を時間、分、秒に変換します。
変換する秒数を入力してください。(終了:0) >3600
3600秒は1時間0分0秒です。

変換する秒数を入力してください。(終了:0) >3661
3661秒は1時間1分1秒です。

変換する秒数を入力してください。(終了:0) >9000
9000秒は2時間30分0秒です。

変換する秒数を入力してください。(終了:0) >0
処理を終了します。


******************************************
do whileのネストを利用した九九表
******************************************
【課題203】KukudoWhile.java
do while文のネストを利用して九九表を表示するプログラムを作成しなさい。

<実行結果>
msg: do_while文を使って九九表を作成します
1の段   1       2       3       4       5       6       7       8       9
2の段   2       4       6       8       10      12      14      16      18
3の段   3       6       9       12      15      18      21      24      27
4の段   4       8       12      16      20      24      28      32      36
5の段   5       10      15      20      25      30      35      40      45
6の段   6       12      18      24      30      36      42      48      54
7の段   7       14      21      28      35      42      49      56      63
8の段   8       16      24      32      40      48      56      64      72
9の段   9       18      27      36      45      54      63      72      81


******************************************
処理フローの制御 (break文)
******************************************
【課題204】Kukuz1.java
for文のネスト、break文を利用して、入力した値以降の処理を行わない九九表を作成しなさい。
【ヒント】→第1部のKuku_break.javaを参照

【解説】→	break; break文を実行すると、繰返処理のbreak文以降の処理を飛ばして、
		繰り返し処理を抜ける。
<実行結果例>
以降実行しない段を入力して下さい　>　6
以降実行しない×数を入力して下さい　>　6
九九表
1の段   1       2       3       4       5
2の段   2       4       6       8       10
3の段   3       6       9       12      15
4の段   4       8       12      16      20
5の段   5       10      15      20      25


******************************************
処理フローの制御(continue文)
******************************************
【課題205】Kukuz2.java
for文のネスト、continue文を利用して、入力した値の処理を行わない九九表を作成しなさい。
【ヒント】→第1部のKuku_continue.javaを参照

【解説】→	continue;　continue文を実行すると、繰返処理のcontinue文以降の処理を飛ばして
		次の繰返に入る。
<実行結果例>
実行しない段を入力して下さい　>　6
実行しない×数を入力して下さい　>　6
九九表
1の段   1       2       3       4       5       7       8       9
2の段   2       4       6       8       10      14      16      18
3の段   3       6       9       12      15      21      24      27
4の段   4       8       12      16      20      28      32      36
5の段   5       10      15      20      25      35      40      45
7の段   7       14      21      28      35      49      56      63
8の段   8       16      24      32      40      56      64      72
9の段   9       18      27      36      45      63      72      81


******************************************
for文のネストを利用した三角形の描写
******************************************
【課題206】NestLoopy.java
for文のネストを利用して三角形を描きなさい。
前半部(i:1-9)と後半部(i:8-1)の二つの処理を実行する。
【ヒント】→テキストP108のNestLoop.javaを参考
		三角の中には空白が出力されている。

【解説】→	iが1-9の間繰り返し、8-1の間繰り返すので2つのfor文で構成される。
		三角の中抜きにするにはどういうタイミングで"*"を印字すればいいかを考える。
		"*"の位置は、最初と？番目であると考える。	
<実行結果>
i=1     *
i=2     **
i=3     * *
i=4     *  *
i=5     *   *
i=6     *    *
i=7     *     *
i=8     *      *
i=9     *       *
i=8     *      *
i=7     *     *
i=6     *    *
i=5     *   *
i=4     *  *
i=3     * *
i=2     **
i=1     *


************************************************
for文のネストを利用して整数ピラミッド作成
************************************************
【課題207】IntPyramid.java
段数を入力して整数のピラミッドをfor文のネストを利用して作成しなさい。
10以上の数は末尾1桁に変換すること。

【ヒント】→全体繰り返し処理は段、内側の繰り返し処理は数字の出力と考える。
		ピラミッドの左側には何かが出力されている!!
		末尾1桁にするには%を利用する。

【解説】→	①入力したピラミッドの段数分だけfor文を利用して繰り返す。
		②それぞれの段数は二つの繰り返しで構成する。
			②-1 	左側の半角空白の出力を繰り返す。
			②-2	その段数の値出力を繰り返す。
				その際10の位を除くには%演算子を利用する。
<実行結果>
（実行例１）
数字のピラミッドを作成します。
ピラミッドの段数を入力して下さい。
段数 > 5
    1
   222
  33333
 4444444
555555555


（実行例２）
kouki>java intPyramid
数字のピラミッドを作成します。
ピラミッドの段数を入力して下さい。
段数 > 20
                   1
                  222
                 33333
                4444444
               555555555
              66666666666
             7777777777777
            888888888888888
           99999999999999999
          0000000000000000000
         111111111111111111111
        22222222222222222222222
       3333333333333333333333333
      444444444444444444444444444
     55555555555555555555555555555
    6666666666666666666666666666666
   777777777777777777777777777777777
  88888888888888888888888888888888888
 9999999999999999999999999999999999999
000000000000000000000000000000000000000


******************************************
for文のネストを利用して逆ピラミッドの作成
******************************************
【課題208】intGyakuPyramid.java				　	
以下の結果を表示するプログラムを作成しなさい。

【ヒント】→前の問題、整数ピラミッドを参考に考える。
		段は指定した数から1つずつ減算して考える。
	例
		段iが5の時、その前に空白を0個打つ。
		段iが4の時、その前に空白を1個打つ。
		段iが3の時、その前に空白を2個打つ。
		段iが2の時、その前に空白を3個打つ。
		段iが1の時、その前に空白を4個打つ。
		
		段iが5の時、5を9回打つ。
		段iが4の時、4を7回打つ。
		段iが3の時、3を5回打つ。
		段iが2の時、2を3回打つ。
		段iが1の時、1を1回打つ。 

【解説】→上記の規則をfor文で作成すればよい。

（実行例）
数字の逆ピラミッドを作成します。
ピラミッドの段数を入力して下さい。
段数 > 5
555555555
 4444444
  33333
   222
    1
	
数字の逆ピラミッドを作成します。
ピラミッドの段数を入力して下さい。
段数 > 12
22222222222222222222222
 111111111111111111111
  0000000000000000000
   99999999999999999
    888888888888888
     7777777777777
      66666666666
       555555555
        4444444
         33333
          222
           1	

*********************************************************
for文のネストを利用して逆ピラミッドを横に段数分配置する。
*********************************************************
【課題209】intyokoGyakuPyramid.java				　	
以下の結果を表示するプログラムを作成しなさい。

【ヒント】→　逆ピラミッドの右側に空白を加える。

	ピラミッド左側の空白
		段iが5の時、その前に空白を0個打つ。
		段iが4の時、その前に空白を1個打つ。
		段iが3の時、その前に空白を2個打つ。
		段iが2の時、その前に空白を3個打つ。
		段iが1の時、その前に空白を4個打つ。

	ピラミッドの数字部分	
		段iが5の時、5を9回打つ。
		段iが4の時、4を7回打つ。
		段iが3の時、3を5回打つ。
		段iが2の時、2を3回打つ。
		段iが1の時、1を1回打つ。 

	ピラミッド右側の空白
		段iが5の時、その前に空白を0個打つ。
		段iが4の時、その前に空白を1個打つ。
		段iが3の時、その前に空白を2個打つ。
		段iが2の時、その前に空白を3個打つ。
		段iが1の時、その前に空白を4個打つ。

【解説】→上記の規則を下記の多重for文で作成すればよい。
		段の数まで繰返。			
			横の数まで繰返。
				ピラミッド左側の空白の繰返。
				ピラミッド数字部分の繰返。
				ピラミッド右側の空白の繰返。

(実行例)

数字の逆ピラミッドを作成します。
ピラミッドの段数を入力して下さい。
段数 > 5
555555555555555555555555555555555555555555555
 4444444  4444444  4444444  4444444  4444444
  33333    33333    33333    33333    33333
   222      222      222      222      222
    1        1        1        1        1




***********************************************************
for文のネストを利用して逆ピラミッドを縦横に段数分配置する。
***********************************************************
【課題210】inttateyokoGyakuPyramid.java				　	
以下の結果を表示するプログラムを作成しなさい。

(実行例)
数字の逆ピラミッドを作成します。
ピラミッドの段数を入力して下さい。
段数 > 5
555555555555555555555555555555555555555555555
 4444444  4444444  4444444  4444444  4444444
  33333    33333    33333    33333    33333
   222      222      222      222      222
    1        1        1        1        1
555555555555555555555555555555555555555555555
 4444444  4444444  4444444  4444444  4444444
  33333    33333    33333    33333    33333
   222      222      222      222      222
    1        1        1        1        1
555555555555555555555555555555555555555555555
 4444444  4444444  4444444  4444444  4444444
  33333    33333    33333    33333    33333
   222      222      222      222      222
    1        1        1        1        1
555555555555555555555555555555555555555555555
 4444444  4444444  4444444  4444444  4444444
  33333    33333    33333    33333    33333
   222      222      222      222      222
    1        1        1        1        1
555555555555555555555555555555555555555555555
 4444444  4444444  4444444  4444444  4444444
  33333    33333    33333    33333    33333
   222      222      222      222      222
    1        1        1        1        1


******************************************
列数が異なる２次元配列へ要素を格納
******************************************
【課題211】Rei6_8_2y.java
テキストP185、Rei6_8_2.javaを参考にして以下の結果を表示するプログラムを作成しなさい。

【ヒント】→列部分をgyo数に応じて作成する
		System.out.print("gyo数を入力してください > ");
		int gyo = Integer.parseInt(br.readLine());
		int[][] triMatrix = new int[gyo][];

【解説】→P188を参照のこと。二次元配列の列は常に同じ数ではなく、行毎に必要な数だけ定義できる。
		P189のRei_6_8_2の②から⑤にかけて行っている処理を繰り返し処理を用いて行えばよい。
		
		System.out.print((i+1) + "行目には何個の列を作成しますか？ > " );		
		retu = Integer.parseInt(br.readLine());
		triMatrix[i] = new int [retu];
		
		配列の内容を順に表示する際は、対象行の列数分だけを表示してやればよい。		

<実行結果>
（実行例１）
gyo数を入力してください > 5
1行目には何個の列を作成しますか？ > 1
2行目には何個の列を作成しますか？ > 2
3行目には何個の列を作成しますか？ > 3
4行目には何個の列を作成しますか？ > 4
5行目には何個の列を作成しますか？ > 5

配列にデータを設定します
配列の内容を順に表示します
        1列     2列     3列     4列     5列
------------------------------------------------
1行     11
2行     21      22
3行     31      32      33
4行     41      42      43      44
5行     51      52      53      54      55


（実行例２）
gyo数を入力してください > 7
1行目には何個の列を作成しますか？ > 5
2行目には何個の列を作成しますか？ > 4
3行目には何個の列を作成しますか？ > 3
4行目には何個の列を作成しますか？ > 2
5行目には何個の列を作成しますか？ > 1
6行目には何個の列を作成しますか？ > 0
7行目には何個の列を作成しますか？ > 7

配列にデータを設定します
配列の内容を順に表示します
        1列     2列     3列     4列     5列     6列     7列
----------------------------------------------------------------
1行     11      12      13      14      15
2行     21      22      23      24
3行     31      32      33
4行     41      42
5行     51
6行
7行     71      72      73      74      75      76      77


**********************************
三次元配列の利用
**********************************
【課題212】Array3.java
三次元配列array3(3*3*3)に1から27までのデータを割り当てた後、後方からデータを表示する
プログラムを作成しなさい。
【ヒント】→以下のソースプログラムを参照
		final int n = 3;
		int [][][] array3 = new int[n][n][n];
		
		for(int i = 0; i < array3.length; i++){
			for( int j = 0; j < array3[i].length; j++){
				for(int k = 0; k < array3[i][j].length; k++){


【解説】→3次元配列を利用するので、データ入力には３重の繰り返し処理が必要となる。

<処理結果>
msg: 三次元配列array3(3*3*3)に1から27までのデータを割り当てます。
array3[0][0][0]=1 array3[0][0][1]=2 array3[0][0][2]=3
array3[0][1][0]=4 array3[0][1][1]=5 array3[0][1][2]=6
array3[0][2][0]=7 array3[0][2][1]=8 array3[0][2][2]=9

array3[1][0][0]=10 array3[1][0][1]=11 array3[1][0][2]=12
array3[1][1][0]=13 array3[1][1][1]=14 array3[1][1][2]=15
array3[1][2][0]=16 array3[1][2][1]=17 array3[1][2][2]=18

array3[2][0][0]=19 array3[2][0][1]=20 array3[2][0][2]=21
array3[2][1][0]=22 array3[2][1][1]=23 array3[2][1][2]=24
array3[2][2][0]=25 array3[2][2][1]=26 array3[2][2][2]=27

msg: 三次元配列array3(3*3*3)を後ろから読んでいきます。
array3[2][2][2]=27 array3[2][2][1]=26 array3[2][2][0]=25
array3[2][1][2]=24 array3[2][1][1]=23 array3[2][1][0]=22
array3[2][0][2]=21 array3[2][0][1]=20 array3[2][0][0]=19

array3[1][2][2]=18 array3[1][2][1]=17 array3[1][2][0]=16
array3[1][1][2]=15 array3[1][1][1]=14 array3[1][1][0]=13
array3[1][0][2]=12 array3[1][0][1]=11 array3[1][0][0]=10

array3[0][2][2]=9 array3[0][2][1]=8 array3[0][2][0]=7
array3[0][1][2]=6 array3[0][1][1]=5 array3[0][1][0]=4
array3[0][0][2]=3 array3[0][0][1]=2 array3[0][0][0]=1


******************************************
int型の引数とint型の戻り値
******************************************
【課題213】Rei8_3_1x.java
テキストP228のRei8_3_1.javaを参考にして四則演算を行うプログラムを作成しなさい。
Rei8_3_1xクラスとCalcクラスに分割し、Calcクラスには以下のメソッドを作成する。
public int tasu(int b1, int b2)
public int hiku(int b1, int b2)
public int kake(int b1, int b2)
public int waru(int b1, int b2)
public int amari(int b1, int b2)

<実行結果例>
input a1 > 15
input a2 > 10
足し算 15 + 10 = 25
引き算 15 - 10 = 5
掛け算 15 * 10 = 150
割り算 15 / 10 = 1
剰余算 15 % 10 = 5


******************************************
int型変数とboolean型の戻り値
******************************************
【課題214】Rei8_boolean.java
入力した値二つとその割り算の答えを引数としてwariHanteiメソッドに渡します。
wariHantei()では答えを判定し、正しければtrue、誤りであればfalseを返す。

【ヒント】→メソッド　public ******* wariHantei(int a1, int a2, int a3){
		メソッド返却値の型(上記の*******)は何になればいいのか。

<実行結果例>
（実行例１）
割られる数を入力して下さい > 100
割る数を入力して下さい > 2
答えを入力して下さい  100 ÷ 2 =  > 50
答えの結果はtrueです。

（実行例２）
割られる数を入力して下さい > 100
割る数を入力して下さい > 2
答えを入力して下さい  100 ÷ 2 =  > 51
答えの結果はfalseです。


******************************************
length()メソッド、 substring()メソッド、
******************************************
【課題215】Rei8_1_3z.java
length()メソッド, substring()メソッドを利用して文字列の一部を取得するプログラムを作成しなさい。
【ヒント】→テキストP354参照、P253参照
		文字列.length()を利用することで文字列の長さを取得できる。
		文字桁数は文字数に応じて出力すること。
		存在しない桁数に対しても対応すること。

<実行結果例>
（実行例１）
mag: substring()メソッドを用いて入力した日本語文字列の一部を取得する。
日本語文字列str1を入力して下さい > 船橋情報ビジネス専門学校
1 2 3 4 5 6 7 8 9 101112
船橋情報ビジネス専門学校

msg: 何文字目から何文字目までを取得しますか？
from > 5
to > 8

日本語文字列str1の一部を切り出した結果です。
5 6 7 8
ビジネス

（実行例２）
mag: substring()メソッドを用いて入力した日本語文字列の一部を取得する。
日本語文字列str1を入力して下さい > 船橋情報ビジネス専門学校
1 2 3 4 5 6 7 8 9 101112
船橋情報ビジネス専門学校

msg: 何文字目から何文字目までを取得しますか？
from > 9
to > 13

日本語文字列str1の一部を切り出した結果です。
9 101112
専門学校

（実行例３）
mag: substring()メソッドを用いて入力した日本語文字列の一部を取得する。
日本語文字列str1を入力して下さい > 船橋情報ビジネス専門学校
1 2 3 4 5 6 7 8 9 101112
船橋情報ビジネス専門学校

msg: 何文字目から何文字目までを取得しますか？
from > 0
to > 4

日本語文字列str1の一部を切り出した結果です。
1 2 3 4
船橋情報

******************************************
indexOf()メソッド
******************************************
【課題216】Rei8_1_3zz.java
int indexOf(char ch, int formIndex)メソッドを利用して指定文字の最初の出現位置のインデックスを返すプログラムを作成しなさい。
【ヒント】→テキストP354を参照
		String s = "Hello Java String!";
		System.out.println(s.indexOf('a',8));	//9文字目以降の最初に現れる'a'の位置を検索する。
		System.out.println(s.indexOf('z'));	//存在しない文字を指定すると-1が返される。
		
		文字列の1文字をすべて対象としてindexOfメソッドを実行し、その結果を判定する。
		対象アルファベットであれば"^",以外の場合は" "を出力する。
		
<実行結果例>
（実行例１）
msg: index()メソッドを用いて指定した文字の位置を検索します。
msg: アルファベット(半角)の文字列str1を入力して下さい
> kyouha dono noodle wo tabeyoukana
msg: 指定するアルファベット(半角)1文字を入力して下さい > o
*         *         *         *
012345678901234567890123456789012
kyouha dono noodle wo tabeyoukana
  ^     ^ ^  ^^     ^      ^

（実行例２）
msg: index()メソッドを用いて指定した文字の位置を検索します。
msg: アルファベット(半角)の文字列str1を入力して下さい
> kyouha dono noodle wo tabeyoukana
msg: 指定するアルファベット(半角)1文字を入力して下さい > z
*         *         *         *
012345678901234567890123456789012
kyouha dono noodle wo tabeyoukana

指定した文字"z"は検索できませんでした。


******************************************
トランプのシャッフルを行う。
******************************************
【課題217】trump1.java
トランプのシャッフルを行う。シャッフルの回数を入力させて、その並びを表示する。

【ヒント】以下のソースプログラムを利用しなさい。【省略】を補いなさい。

		//H:ハート、D:ダイヤ、C:クラブ、S:スペード
		char[] mark = {'H','D','C','S'};
		
		//トランプ52枚順にハード、ダイヤ、クラブ、スペードとする。	
		int[][] trump = new int[mark.length][13];	
		
		
		//初期処理　配列trumpを0から51までの数字を入力する。
		// 0-12：ハートの1-13とする。
		//13-25：ダイアの1-13とする。
		//26-38：クラブの1-13とする。
		//39-51：スペードの1-13とする。
		
		//最初の並びを表示する。
		System.out.println("msg:トランプを順に並べます。H:ハート、D:ダイヤ、C:クラブ、S:スペード");
		for( int i = 0; i < trump.length; i++){
			for ( int j =0; j < trump[i].length; j++){
				trump[i][j] = (i*13 + j);
				System.out.print(mark[trump[i][j]/13] + ":" );
				System.out.printf( "%02d", (trump[i][j]%13 + 1) );
				System.out.print(" ");
			}
			System.out.println();
		}
		System.out.println();
		
		//シャッフルの回数を入力
		System.out.print("トランプを何回シャッフルしますか？ > ");
		int shuffle = Integer.parseInt(br.readLine());
		
		for( int shf = 1; shf <= shuffle; shf++){
			System.out.println("msg:" + shf + "回目のシャッフル実行します。\t");
			for( int i = 0;   i < trump.length;   i++){
				for( int j = 0;  j < trump[i].length; j++){
					
					//乱数（行の値、列の値）を発生させる
					int ran1 = (int)(Math.random() * trump.length);
					int ran2 = (int)(Math.random() * 13);
					
					//入替えの値を表示する。
					//System.out.println( i + ":" + j + "=" + trump[i][j] + " ⇔ " +  ran1 + ":" + ran2 + "=" + trump[ran1][ran2] );
					
					//trump[ran1][ran2]の値とtrump[i][j]の値を入れ換え	
					int work;
					【省略１】;
					【省略２】;
					【省略３】;
				}
			}
		}
		System.out.println();
		
		//シャッフル後の並びを表示する。
		System.out.println("msg:" + shuffle + "回シャッフルした結果です。H:ハート、D:ダイヤ、C:クラブ、S:スペード");
		for( int i = 0; i < trump.length; i++){
			for( int j = 0; j < trump[i].length; j++){
				//System.out.print("trump[" + i + "][" + j + "] = " + trump[i][j] + " " );
				System.out.print( mark[trump[i][j]/13] + ":" );
				System.out.printf( "%02d", (trump[i][j]%13 + 1));
				System.out.print(" ");
			}
			System.out.println();
		}
	}
}
	
/*
（実行例）
msg:トランプを順に並べます。H:ハート、D:ダイヤ、C:クラブ、S:スペード
H:01 H:02 H:03 H:04 H:05 H:06 H:07 H:08 H:09 H:10 H:11 H:12 H:13
D:01 D:02 D:03 D:04 D:05 D:06 D:07 D:08 D:09 D:10 D:11 D:12 D:13
C:01 C:02 C:03 C:04 C:05 C:06 C:07 C:08 C:09 C:10 C:11 C:12 C:13
S:01 S:02 S:03 S:04 S:05 S:06 S:07 S:08 S:09 S:10 S:11 S:12 S:13

トランプを何回シャッフルしますか？ > 10
msg:1回目のシャッフル実行します。
msg:2回目のシャッフル実行します。
msg:3回目のシャッフル実行します。
msg:4回目のシャッフル実行します。
msg:5回目のシャッフル実行します。
msg:6回目のシャッフル実行します。
msg:7回目のシャッフル実行します。
msg:8回目のシャッフル実行します。
msg:9回目のシャッフル実行します。
msg:10回目のシャッフル実行します。

msg:10回シャッフルした結果です。H:ハート、D:ダイヤ、C:クラブ、S:スペード
C:12 H:11 H:06 H:10 S:09 H:13 C:08 H:05 D:05 C:07 D:02 H:04 C:05
H:12 S:06 S:01 C:10 S:08 S:10 S:05 C:04 H:01 C:13 S:12 H:03 H:07
C:01 D:03 S:03 D:07 D:01 D:04 C:09 D:06 S:11 D:13 H:09 C:03 D:08
S:04 D:10 S:02 C:11 D:12 S:07 D:11 H:08 H:02 S:13 C:06 D:09 C:02
*/	

******************************************
2次元配列を渦巻き状に移動する。
******************************************
【課題218】array2z.java
2次元配列の大きさを入力し、左上から下に渦巻き状に移動する。

【ヒント】以下のソースプログラムを利用しなさい。【省略】を補いなさい。

		//array2の大きさを入力
		System.out.print("msg:配列array2の大きさを指定してください。input 偶数> ");
		int kazu = Integer.parseInt(br.readLine());
		
		//指定された大きさでarray2の領域を確保。
		String[][] array2 = new String[kazu][kazu];		
		
		System.out.println("msg: array2[0][0])から下へ向かいます。");

		int k,l;		

		char sw = 'd'; 		
		for( int i = 0,j = 0; !((i == array2.length/2) && (j == array2.length/2)); i++,j++){

		
			//下に進む d:down
			if( sw == 'd'){
				l = j;		
				for( k = i;   k < array2.length - i; k++){
					array2[k][l] = "↓";			
				}
				sw = 'r';
			}

			//右に進む r:right				
			if( sw == 'r'){
				k = array2.length - 1 - i; 
				for(  l = j; l < array2.length - j ; l++){
					array2[k][l] = "→";
				}
				sw = 'u';
			}
			
			//上に進む u:up
			if( sw == 'u'){
				l = array2.length - 1 - j;		
				for( k = array2.length - 1 - j; k > i; k--){
					array2[k][l] = "↑";			
				}
				sw = 'l';
			}

			//左に進む l:left				
			if( sw == 'l'){

				【省略１】

			}
		}
		
		//配列arrayを表示する。
		【省略２】
	}
}


/*
（実行例１）
msg:配列array2の大きさを指定してください。input 偶数> 16
msg: array2[0][0])から下へ向かいます。
↓←←←←←←←←←←←←←←←
↓↓←←←←←←←←←←←←←↑
↓↓↓←←←←←←←←←←←↑↑
↓↓↓↓←←←←←←←←←↑↑↑
↓↓↓↓↓←←←←←←←↑↑↑↑
↓↓↓↓↓↓←←←←←↑↑↑↑↑
↓↓↓↓↓↓↓←←←↑↑↑↑↑↑
↓↓↓↓↓↓↓↓←↑↑↑↑↑↑↑
↓↓↓↓↓↓↓→↑↑↑↑↑↑↑↑
↓↓↓↓↓↓→→→↑↑↑↑↑↑↑
↓↓↓↓↓→→→→→↑↑↑↑↑↑
↓↓↓↓→→→→→→→↑↑↑↑↑
↓↓↓→→→→→→→→→↑↑↑↑
↓↓→→→→→→→→→→→↑↑↑
↓→→→→→→→→→→→→→↑↑
→→→→→→→→→→→→→→→↑
*/


******************************************
龍の尻尾を作成する。
******************************************
【課題219】NestLoopz2.java

龍の尻尾を作成する。奇数を入力させ処理を実行する。

【ヒント】以下のソースプログラムを利用しなさい。【省略】を補いなさい。

		int k_syoki;
		int j_syuryo;
		int in = 0;

		BufferedReader br = 
			new BufferedReader(new InputStreamReader(System.in));

		//整数値の入力を促す。奇数でなければ、再度入力させる。	
		while( 【省略１】 ){ 
			System.out.print("整数（奇数）を入力してください。　＞");
			in = Integer.parseInt(br.readLine());
		}
		
		for( ; in >= 3; in = in - 2){
			

			/* for文のネスト処理 */
			for(int i = 1; i <= in; i++){
				
				System.out.print("i=" + i + "\t");

				//前半部分か後半部分かを判定している。
				if(i <= (in + 1)/2 ){
					//前半部分の処理・jの終了値とkの初期値の設定を行う。
					j_syuryo = i; 
					k_syoki  = i + 1;
				}else{
					//後半部分の処理・jの終了値とkの初期値の設定を行う。
					j_syuryo = (in + 1 - i);
					k_syoki  = (in + 2 - i);
				}
			

				//■と□を出力する処理。
				for(int j = 1; j <= j_syuryo; j++){
					System.out.print("■");
				}
			
				for(int k = k_syoki; k <= (in + 1)/2 ; k++){
					System.out.print("　");
				}
				System.out.println();
	
			
				//【後半】in = 9の場合
				//*の打ち方	
				//i=6ならj=1から4まで進む。
				//i=7ならj=1から3まで進む。
				//i=8ならj=1から2まで進む。
				//i=9ならj=1から1まで進む。

				
				//空白の打ち方	
				//i=6ならj=5から5まで進む。
				//i=7ならj=4から5まで進む。
				//i=8ならj=3から5まで進む。
				//i=9ならj=2から5まで進む。
			}
		}
	}
}

/*
整数（奇数）を入力してください。　＞14
整数（奇数）を入力してください。　＞13
i=1     ■　　　　　　
i=2     ■■　　　　　
i=3     ■■■　　　　
i=4     ■■■■　　　
i=5     ■■■■■　　
i=6     ■■■■■■　
i=7     ■■■■■■■
i=8     ■■■■■■　
i=9     ■■■■■　　
i=10    ■■■■　　　
i=11    ■■■　　　　
i=12    ■■　　　　　
i=13    ■　　　　　　
i=1     ■　　　　　
i=2     ■■　　　　
i=3     ■■■　　　
i=4     ■■■■　　
i=5     ■■■■■　
i=6     ■■■■■■
i=7     ■■■■■　
i=8     ■■■■　　
i=9     ■■■　　　
i=10    ■■　　　　
i=11    ■　　　　　
i=1     ■　　　　
i=2     ■■　　　
i=3     ■■■　　
i=4     ■■■■　
i=5     ■■■■■
i=6     ■■■■　
i=7     ■■■　　
i=8     ■■　　　
i=9     ■　　　　
i=1     ■　　　
i=2     ■■　　
i=3     ■■■　
i=4     ■■■■
i=5     ■■■　
i=6     ■■　　
i=7     ■　　　
i=1     ■　　
i=2     ■■　
i=3     ■■■
i=4     ■■　
i=5     ■　　
i=1     ■　
i=2     ■■
i=3     ■　
*/
